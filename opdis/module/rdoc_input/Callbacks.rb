#!/usr/bin/env ruby1.9
# :title: Opdis::Callbacks
=begin rdoc
=Opdis Callbacks
<i>Copyright 2010 Thoughtgang <http://www.thoughtgang.org></i>

= Opdis Callback Routines

== Summary

== Example

== Contact
Support:: community@thoughtgang.org
Project:: http://rubyforge.org/projects/opdis/ 
=end

module Opdis

=begin rdoc
:vma : vma of insn
:offset : offset into target
:size : size of insn in bytes
:buffer : contains insn bytes
:items : array of strings generated by libopcodes
:raw_insn : insn.ascii (raw string repr from libopcodes)
these are only set if libopcodes produces them. For x86 they are not set:
:branch_delay
:data_size
:type
:target
:target2
=end
  class InstructionDecoder

=begin rdoc
=end
    def decode( insn, hash )
      #invoke opdis generic instruction decoder
      # 'insn' is filled .
    end

  end

=begin rdoc
=end
  class X86Decoder < InstructionDecoder

=begin rdoc
=end
    def decode( insn, hash )
      # invoke opdis default x86 decoder with AT&T syntax
    end

  end

=begin rdoc
=end
  class X86IntelDecoder < InstructionDecoder

=begin rdoc
=end
    def decode( insn, hash )
      # invoke opdis default x86 decoder with Intel syntax
    end

  end

=begin rdoc
=end
  class VisitedAddressTracker

    # invoke opdis default handler
    # uses opdis tree to store addresses
=begin rdoc
=end
    def visited?( insn )
    end

  end

=begin rdoc
=end
  class AddressResolver

=begin rdoc
Return nil if address cannot be resolved
=end
    def resolve( insn )
      # invoke opdis default resolver 
    end

  end
end
