#!/usr/bin/env ruby1.9
# :title: Opdis::Callbacks
=begin rdoc
=Opdis Callbacks
<i>Copyright 2010 Thoughtgang <http://www.thoughtgang.org></i>

= Opdis Callback Routines

== Summary

libopdis uses callback functions to override its default behavior. The
OpdisExt extension provides stubs that allow Ruby objects to be used
for these callbacks.

== Contact
Support:: community@thoughtgang.org
Project:: http://rubyforge.org/projects/opdis/ 
=end

module Opdis

# ----------------------------------------------------------------------
=begin rdoc
An object responsible for filling an Opdis::Instruction object based on the
output of libopcodes.
=end
  class InstructionDecoder

=begin rdoc
Fill an Opdis::Instruction object based on the information supplied by
libopcodes.

The <i>insn</i> argument is an Opdis::Instruction object to be filled by this 
method. Depending on the InstructionDecoder object, it may have been 
partially filled by a previous Decoder (e.g. the GenericDecoder and one of the
X86Decoders).

The <i>hash</i> argument contains the output of libopcodes and has the following
members:

:vma:: The virtual memory address of the instruction.
:offset:: The offset of the instruction into the target buffer.
:size:: The size of the instruction in bytes.
:buffer:: An array containing the bytes in the instruction.
:items:: An array of the instruction strings generated by libopcodes.
:raw_insn:: The complete instruction string (ASCII_ as generated by libopcodes. 
:branch_delay:: The number of instructions that will execute before the branch
takes effect. 
This is not always set by libopcodes.
:data_size:: The size of the data reference in the instruction. 
This is not always set by libopcodes.
:type:: The type of the instruction (e.g. non-branch, branch type, etc).
This is not always set by libopcodes.
:target:: The target address of a branch or dereference.
This is not always set by libopcodes.
:target2:: The second target address of a branch or dereference.
This is not always set by libopcodes.

InstructionDecoder#decode will invoke opdis_default_decoder to fill
architecture-independent members such as Instruction#vma and Instruction#ascii.

This method must return success or failure. Failure will result in an 
error message being added to Disassembly.errors.
=end
    def decode( insn, hash )
      true
    end

  end

# ----------------------------------------------------------------------
=begin rdoc
A decoder for disassembled AT&T syntax x86 instructions.
=end
  class X86Decoder < InstructionDecoder

=begin rdoc
See InstructionDecoder#decode.
This will invoke opdis default x86 decoder with AT&T syntax.
=end
    def decode( insn, hash )
      true
    end

  end

# ----------------------------------------------------------------------
=begin rdoc
A decoder for disassembled Intel syntax x86 instructions.
=end
  class X86IntelDecoder < InstructionDecoder

=begin rdoc
See InstructionDecoder#decode.
This will invoke opdis default x86 decoder with Intel syntax.
=end
    def decode( insn, hash )
      true
    end

  end

# ----------------------------------------------------------------------
=begin rdoc
An object for determining whether an address has been encountered.

This is used to prevent endless loops in control-flow analysis.
=end
  class VisitedAddressTracker

=begin rdoc
Return <i>true</i> if the address at Instruction.vma has been encountered,
false otherwise.

VisitedAddressTracker#visited? will invoke the Opdis default visited address 
handler, which uses an AVL tree to store visited addresses.
=end
    def visited?( insn )
    end

  end

# ----------------------------------------------------------------------
=begin rdoc
An object for determine the VMA referred to by the target operand of a
branch instruction, if possible.
=end
  class AddressResolver

=begin rdoc
Return the VMA (e.g. the contents of a register, or the contents pointed
to by an address expression) for the target operand of the instruction. 
Return <i>nil</i> if there is no target operand, or the operand VMA cannot
be determined.

AddressResolver#resolve will invoke the default Opdis resolver, which returns 
<i>nil</i> regardless of operand value.
=end
    def resolve( insn )
    end

  end
end
